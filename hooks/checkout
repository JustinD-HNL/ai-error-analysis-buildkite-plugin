#!/bin/bash
set +e  # Don't exit on error - we want to capture and analyze failures

# AI Error Analysis Buildkite Plugin - Checkout Hook
# This hook wraps the checkout process to analyze failures

# Check if plugin was initialized
if [[ "${AI_ERROR_ANALYSIS_INITIALIZED:-false}" != "true" ]]; then
  # Source environment hook first
  if [[ -f "/buildkite/hooks/environment" ]]; then
    source /buildkite/hooks/environment
  fi
fi

LOG_PREFIX="${AI_ERROR_ANALYSIS_LOG_PREFIX:-ü§ñ [AI Error Analysis]}"
PLUGIN_DIR="${AI_ERROR_ANALYSIS_PLUGIN_DIR:-/buildkite/plugins/ai-error-analysis}"

echo "--- ${LOG_PREFIX} Monitoring checkout process"

# Capture the standard checkout command output
CHECKOUT_LOG=$(mktemp /tmp/checkout-log.XXXXXX)

# Run the default checkout with output capture
if [[ -n "${BUILDKITE_REPO}" ]]; then
  echo "Cloning ${BUILDKITE_REPO}..."
  
  # Configure git with GitHub token if available and repo is from GitHub
  if [[ -n "${GITHUB_TOKEN:-}" ]] && [[ "${BUILDKITE_REPO}" =~ github\.com ]]; then
    # Extract the repo path from the URL
    REPO_PATH=$(echo "${BUILDKITE_REPO}" | sed -E 's|https://github.com/||; s|\.git$||')
    
    # Configure git to use the token as a credential helper
    git config --global credential.helper store
    echo "https://x-access-token:${GITHUB_TOKEN}@github.com" > ~/.git-credentials
    
    # Also set the authorization header
    git config --global http.https://github.com/.extraheader "Authorization: Bearer ${GITHUB_TOKEN}"
    
    echo "Using GitHub token for authentication"
    AUTHENTICATED_REPO="${BUILDKITE_REPO}"
  else
    AUTHENTICATED_REPO="${BUILDKITE_REPO}"
  fi
  
  # Buildkite's default checkout command
  # Use pipefail to capture git's exit status even when piping to tee
  set -o pipefail
  
  # Debug: Check git config
  if [[ "${AI_ERROR_ANALYSIS_DEBUG:-false}" == "true" ]]; then
    echo "Git config:"
    git config --list | grep -E "(credential|http)" || true
  fi
  
  # Try clone - let git handle the authentication via config
  if git clone -- "${AUTHENTICATED_REPO}" . 2>&1 | tee "${CHECKOUT_LOG}"; then
    CHECKOUT_EXIT_STATUS=0
  else
    CHECKOUT_EXIT_STATUS=$?
    
    # If it fails with HTTP/2 error, retry with HTTP/1.1
    if [[ ${CHECKOUT_EXIT_STATUS} -ne 0 ]] && grep -q "HTTP/2" "${CHECKOUT_LOG}"; then
      echo "HTTP/2 failed, retrying with HTTP/1.1..."
      rm -rf .git .* * 2>/dev/null || true  # Clean up failed attempt
      
      # Force HTTP/1.1
      git config --global http.version HTTP/1.1
      
      if git clone -- "${AUTHENTICATED_REPO}" . 2>&1 | tee -a "${CHECKOUT_LOG}"; then
        CHECKOUT_EXIT_STATUS=0
        echo "‚úÖ Successfully cloned using HTTP/1.1"
      else
        CHECKOUT_EXIT_STATUS=$?
      fi
    fi
  fi
  
  set +o pipefail
else
  echo "No repository configured"
  CHECKOUT_EXIT_STATUS=0
fi

# If checkout failed, analyze the error
if [[ ${CHECKOUT_EXIT_STATUS} -ne 0 ]]; then
  echo "--- ${LOG_PREFIX} Analyzing checkout failure"
  
  # Prepare context for analysis
  CONTEXT_FILE=$(mktemp /tmp/ai-context.XXXXXX.json)
  
  # Create context JSON
  cat > "${CONTEXT_FILE}" << EOF
{
  "build_info": {
    "build_id": "${BUILDKITE_BUILD_ID:-unknown}",
    "build_number": "${BUILDKITE_BUILD_NUMBER:-unknown}",
    "pipeline_name": "${BUILDKITE_PIPELINE_NAME:-${BUILDKITE_PIPELINE_SLUG:-unknown}}",
    "step_key": "checkout"
  },
  "error_info": {
    "exit_code": ${CHECKOUT_EXIT_STATUS},
    "command": "git clone",
    "error_category": "checkout_failure"
  },
  "git_info": {
    "branch": "${BUILDKITE_BRANCH:-unknown}",
    "commit": "${BUILDKITE_COMMIT:-unknown}",
    "author": "${BUILDKITE_BUILD_AUTHOR:-${BUILDKITE_BUILD_CREATOR_EMAIL:-unknown}}"
  },
  "pipeline_info": {
    "pipeline": "${BUILDKITE_PIPELINE_SLUG:-unknown}",
    "pipeline_name": "${BUILDKITE_PIPELINE_NAME:-${BUILDKITE_PIPELINE_SLUG:-unknown}}"
  },
  "log_excerpt": $(cat "${CHECKOUT_LOG}" | tail -200 | head -c 10000 | jq -Rs .),
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF

  # Sanitize the context
  SANITIZED_CONTEXT=$(mktemp /tmp/ai-context-sanitized.XXXXXX.json)
  if python3 "${PLUGIN_DIR}/lib/log_sanitizer.py" \
    "${CONTEXT_FILE}" \
    "${SANITIZED_CONTEXT}"; then
    # Use sanitized context for analysis
    mv "${SANITIZED_CONTEXT}" "${CONTEXT_FILE}"
  fi

  # Run AI analysis
  ANALYSIS_OUTPUT=$(mktemp /tmp/ai-analysis.XXXXXX.json)
  
  # Set API key for the analysis
  export AI_ERROR_ANALYSIS_API_KEY="${ANTHROPIC_API_KEY:-${OPENAI_API_KEY:-${GOOGLE_API_KEY:-}}}"
  
  if python3 "${PLUGIN_DIR}/lib/analyze.py" \
    --provider "${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_PROVIDER:-anthropic}" \
    --model "${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_MODEL:-claude-opus-4-20250514}" \
    --max-tokens "${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_MAX_TOKENS:-1000}" \
    --input "${CONTEXT_FILE}" \
    --output "${ANALYSIS_OUTPUT}"; then
    
    # Display analysis results
    echo "--- ${LOG_PREFIX} AI Analysis Results"
    
    if [[ -f "${ANALYSIS_OUTPUT}" ]]; then
      # Generate report using the report generator
      REPORT_FILE=$(mktemp /tmp/ai-report.XXXXXX.md)
      
      if python3 "${PLUGIN_DIR}/lib/report_generator.py" \
        "${ANALYSIS_OUTPUT}" \
        "${CONTEXT_FILE}" \
        "markdown" \
        "true" \
        > "${REPORT_FILE}"; then
        
        # Display report
        cat "${REPORT_FILE}"
        
        # Create annotation
        if command -v buildkite-agent &> /dev/null; then
          cat "${REPORT_FILE}" | buildkite-agent annotate \
            --style "error" \
            --context "ai-checkout-analysis"
          echo "üìù Checkout failure analysis annotation created"
        fi
      else
        echo "‚ùå Report generation failed"
      fi
      
      rm -f "${REPORT_FILE}"
    fi
  else
    echo "‚ùå AI analysis failed"
  fi
  
  # Cleanup
  rm -f "${CONTEXT_FILE}" "${ANALYSIS_OUTPUT}" "${SANITIZED_CONTEXT}"
fi

# Cleanup
rm -f "${CHECKOUT_LOG}"

# Exit with the original checkout status
exit ${CHECKOUT_EXIT_STATUS}