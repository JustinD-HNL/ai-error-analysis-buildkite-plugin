#!/bin/bash
set -euo pipefail

# AI Error Analysis Buildkite Plugin - Post-Command Hook (2025 Update)
# Enhanced security with external secret management and proper sanitization

# Security: Additional protections
set +H  # Disable history expansion
umask 022  # Secure file permissions

# Plugin configuration
# Check if running in container with fixed path
if [[ -d "/buildkite/plugins/ai-error-analysis" ]]; then
  PLUGIN_DIR="/buildkite/plugins/ai-error-analysis"
else
  PLUGIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
fi
LOG_PREFIX="🤖 [AI Error Analysis]"

echo "--- ${LOG_PREFIX} Analyzing command execution"

# Get command exit status
COMMAND_EXIT_STATUS="${BUILDKITE_COMMAND_EXIT_STATUS:-0}"
echo "Command exit status: ${COMMAND_EXIT_STATUS}"

# Only analyze failures by default
if [[ "${COMMAND_EXIT_STATUS}" -eq 0 ]]; then
  echo "✅ Command succeeded, skipping analysis"
  exit 0
fi

# Configuration with security validation
PROVIDER="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_PROVIDER:-}"
MODEL="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_MODEL:-}"
MAX_TOKENS="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_MAX_TOKENS:-1000}"
ENABLE_CACHING="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_ENABLE_CACHING:-true}"
DEBUG="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_DEBUG:-false}"

# Security: Validate configuration values
validate_config() {
  local config_name="$1"
  local config_value="$2"
  local max_length="${3:-100}"
  
  if [[ ${#config_value} -gt $max_length ]]; then
    echo "❌ Configuration value too long: ${config_name}" >&2
    return 1
  fi
  
  # Check for injection attempts
  if [[ "$config_value" =~ [\;\|\&\$\`] ]]; then
    echo "❌ Invalid characters in configuration: ${config_name}" >&2
    return 1
  fi
  
  return 0
}

# Validate critical configuration
if [[ -z "$PROVIDER" ]]; then
  echo "❌ AI provider not specified. Set BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_PROVIDER" >&2
  exit 1
fi

if ! validate_config "PROVIDER" "${PROVIDER}" 20; then
  echo "❌ Invalid provider configuration" >&2
  exit 1
fi

# Validate provider is supported
case "${PROVIDER}" in
  openai|anthropic|gemini)
    echo "✅ Using ${PROVIDER} provider"
    ;;
  *)
    echo "❌ Unsupported provider: ${PROVIDER}" >&2
    echo "Supported providers: openai, anthropic, gemini" >&2
    exit 1
    ;;
esac

# Create secure temporary directory
TEMP_DIR=$(mktemp -d)
chmod 700 "${TEMP_DIR}"
export AI_ERROR_ANALYSIS_TEMP_DIR="${TEMP_DIR}"

# Enhanced cleanup function
cleanup() {
  local exit_code=$?
  
  # Security: Securely remove temporary files
  if [[ -d "${TEMP_DIR}" ]]; then
    # Overwrite sensitive files before removal
    find "${TEMP_DIR}" -type f -name "*.json" -exec shred -vfz -n 3 {} \; 2>/dev/null || {
      # Fallback if shred not available
      find "${TEMP_DIR}" -type f -name "*.json" -exec rm -f {} \;
    }
    rm -rf "${TEMP_DIR}"
  fi
  
  # Clear sensitive environment variables
  unset AI_ERROR_ANALYSIS_API_KEY 2>/dev/null || true
  unset AI_ERROR_ANALYSIS_TEMP_DIR
  
  exit $exit_code
}
trap cleanup EXIT

# Get API key from external secret management
get_api_key() {
  local secret_type="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_SECRET_SOURCE_TYPE:-env_var}"
  local api_key=""
  
  case "${secret_type}" in
    "aws_secrets_manager")
      local secret_name="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_SECRET_SOURCE_SECRET_NAME}"
      local region="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_SECRET_SOURCE_REGION:-us-east-1}"
      
      if [[ -z "$secret_name" ]]; then
        echo "❌ AWS Secrets Manager secret name not specified" >&2
        return 1
      fi
      
      echo "🔐 Retrieving API key from AWS Secrets Manager..."
      api_key=$(aws secretsmanager get-secret-value \
        --secret-id "$secret_name" \
        --region "$region" \
        --query SecretString --output text 2>/dev/null)
      
      if [[ -z "$api_key" ]]; then
        echo "❌ Failed to retrieve secret from AWS Secrets Manager" >&2
        return 1
      fi
      ;;
      
    "vault")
      local vault_path="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_SECRET_SOURCE_VAULT_PATH}"
      local vault_role="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_SECRET_SOURCE_VAULT_ROLE:-}"
      
      if [[ -z "$vault_path" ]]; then
        echo "❌ Vault path not specified" >&2
        return 1
      fi
      
      echo "🔐 Retrieving API key from HashiCorp Vault..."
      
      # Authenticate with Vault if role specified
      if [[ -n "$vault_role" ]]; then
        export VAULT_TOKEN=$(vault write -field=token \
          auth/approle/login \
          role_id="$VAULT_ROLE_ID" \
          secret_id="$VAULT_SECRET_ID" 2>/dev/null)
      fi
      
      api_key=$(vault kv get -mount=secret -field=api_key "$vault_path" 2>/dev/null)
      
      if [[ -z "$api_key" ]]; then
        echo "❌ Failed to retrieve secret from Vault" >&2
        return 1
      fi
      ;;
      
    "gcp_secret_manager")
      local project_id="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_SECRET_SOURCE_PROJECT_ID}"
      local secret_name="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_SECRET_SOURCE_SECRET_NAME}"
      
      if [[ -z "$project_id" || -z "$secret_name" ]]; then
        echo "❌ GCP project ID or secret name not specified" >&2
        return 1
      fi
      
      echo "🔐 Retrieving API key from Google Secret Manager..."
      api_key=$(gcloud secrets versions access latest \
        --secret="$secret_name" \
        --project="$project_id" 2>/dev/null)
      
      if [[ -z "$api_key" ]]; then
        echo "❌ Failed to retrieve secret from Google Secret Manager" >&2
        return 1
      fi
      ;;
      
    "env_var")
      local api_key_env="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_API_KEY_ENV:-${PROVIDER^^}_API_KEY}"
      api_key="${!api_key_env:-}"
      
      if [[ -z "$api_key" ]]; then
        echo "❌ API key not found in environment variable: $api_key_env" >&2
        echo "⚠️  For production, use external secret management instead" >&2
        return 1
      fi
      
      echo "⚠️  Using environment variable for API key (not recommended for production)"
      ;;
      
    *)
      echo "❌ Unknown secret source type: $secret_type" >&2
      echo "Supported types: aws_secrets_manager, vault, gcp_secret_manager, env_var" >&2
      return 1
      ;;
  esac
  
  # Basic API key format validation
  if [[ ${#api_key} -lt 10 ]]; then
    echo "❌ API key appears to be invalid (too short)" >&2
    return 1
  fi
  
  # Export securely (will be cleared in cleanup)
  export AI_ERROR_ANALYSIS_API_KEY="$api_key"
  echo "✅ API key retrieved successfully"
}

# Container security check
check_container_security() {
  # Verify running as non-root if configured
  local enforce_non_root="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_SECURITY_RUN_AS_NON_ROOT:-true}"
  
  if [[ "$enforce_non_root" == "true" && "$(id -u)" -eq 0 ]]; then
    echo "❌ Security violation: Running as root user not allowed" >&2
    return 1
  fi
  
  # Check for privileged mode
  if [[ -f "/proc/self/status" ]] && grep -q "NoNewPrivs:\s*0" /proc/self/status 2>/dev/null; then
    echo "⚠️ Warning: Running without NoNewPrivs security feature" >&2
  fi
  
  return 0
}

# Perform security checks
check_container_security || exit 1
get_api_key || exit 1

# Main analysis function
analyze_error() {
  local start_time=$(date +%s)
  local timeout="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_TIMEOUT_SECONDS:-120}"
  
  echo "--- ${LOG_PREFIX} Starting error analysis"
  
  # Step 1: Collect build context
  echo "📋 Collecting build context..."
  
  # Escape command for JSON
  local escaped_command=$(echo "${BUILDKITE_COMMAND:-unknown}" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | tr '\n' ' ')
  
  # Determine error category based on exit code and log content
  local error_category="unknown"
  if [[ ${COMMAND_EXIT_STATUS} -eq 1 ]]; then
    error_category="general_failure"
  elif [[ ${COMMAND_EXIT_STATUS} -eq 2 ]]; then
    error_category="misuse"
  elif [[ ${COMMAND_EXIT_STATUS} -eq 126 ]]; then
    error_category="permission_denied"
  elif [[ ${COMMAND_EXIT_STATUS} -eq 127 ]]; then
    error_category="command_not_found"
  elif [[ ${COMMAND_EXIT_STATUS} -ge 128 ]]; then
    error_category="signal"
  fi
  
  local context_data=$(cat << EOF
{
  "build_info": {
    "build_id": "${BUILDKITE_BUILD_ID:-unknown}",
    "build_number": "${BUILDKITE_BUILD_NUMBER:-unknown}",
    "pipeline_name": "${BUILDKITE_PIPELINE_NAME:-${BUILDKITE_PIPELINE_SLUG:-unknown}}",
    "step_key": "${BUILDKITE_STEP_KEY:-unknown}"
  },
  "error_info": {
    "exit_code": ${COMMAND_EXIT_STATUS},
    "command": "${escaped_command}",
    "error_category": "${error_category}"
  },
  "git_info": {
    "branch": "${BUILDKITE_BRANCH:-unknown}",
    "commit": "${BUILDKITE_COMMIT:-unknown}",
    "author": "${BUILDKITE_BUILD_AUTHOR:-${BUILDKITE_BUILD_CREATOR_EMAIL:-unknown}}"
  },
  "pipeline_info": {
    "pipeline": "${BUILDKITE_PIPELINE_SLUG:-unknown}",
    "pipeline_name": "${BUILDKITE_PIPELINE_NAME:-${BUILDKITE_PIPELINE_SLUG:-unknown}}"
  },
  "log_excerpt": "$(tail -n 100 /tmp/buildkite.log 2>/dev/null | head -c 5000 | sed 's/"/\\"/g' | tr '\n' ' ' || echo 'Log not available')",
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF
  )
  
  echo "$context_data" > "${TEMP_DIR}/context.json"
  
  # Step 2: Sanitize logs
  echo "🧹 Sanitizing logs..."
  if ! python3 "${PLUGIN_DIR}/lib/log_sanitizer.py" \
    "${TEMP_DIR}/context.json" \
    "${TEMP_DIR}/sanitized_context.json"; then
    echo "❌ Log sanitization failed" >&2
    return 1
  fi
  
  # Step 3: Check cache if enabled
  local cached_result=""
  if [[ "${ENABLE_CACHING}" == "true" ]]; then
    echo "💾 Checking cache..."
    cached_result=$(python3 "${PLUGIN_DIR}/lib/cache_manager.py" check \
      "${TEMP_DIR}/sanitized_context.json" 2>/dev/null || echo "")
    
    if [[ -n "$cached_result" ]]; then
      echo "✅ Found cached analysis result"
      echo "$cached_result" > "${TEMP_DIR}/analysis_result.json"
      generate_report
      return 0
    fi
  fi
  
  # Step 4: Call AI provider
  echo "🤖 Analyzing with ${PROVIDER}..."
  if ! timeout "$timeout" python3 "${PLUGIN_DIR}/lib/analyze.py" \
    --provider "$PROVIDER" \
    --model "$MODEL" \
    --max-tokens "$MAX_TOKENS" \
    --input "${TEMP_DIR}/sanitized_context.json" \
    --output "${TEMP_DIR}/analysis_result.json"; then
    
    local exit_code=$?
    if [[ $exit_code -eq 124 ]]; then
      echo "⏱️ Analysis timed out after ${timeout} seconds" >&2
    else
      echo "❌ AI analysis failed" >&2
    fi
    return 1
  fi
  
  # Step 5: Cache result if enabled
  if [[ "${ENABLE_CACHING}" == "true" ]]; then
    python3 "${PLUGIN_DIR}/lib/cache_manager.py" store \
      "${TEMP_DIR}/sanitized_context.json" \
      "${TEMP_DIR}/analysis_result.json" 2>/dev/null || true
  fi
  
  # Step 6: Generate report
  generate_report
  
  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  echo "✅ Analysis completed in ${duration} seconds"
}

# Generate and display report
generate_report() {
  echo "📊 Generating report..."
  
  if ! python3 "${PLUGIN_DIR}/lib/report_generator.py" \
    "${TEMP_DIR}/analysis_result.json" \
    "${TEMP_DIR}/sanitized_context.json" \
    "markdown" \
    "true" \
    > "${TEMP_DIR}/report.md"; then
    echo "❌ Report generation failed" >&2
    return 1
  fi
  
  # Create Buildkite annotation
  local annotation_style="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_OUTPUT_STYLE:-error}"
  local include_confidence="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_OUTPUT_INCLUDE_CONFIDENCE:-true}"
  
  if command -v buildkite-agent >/dev/null; then
    cat "${TEMP_DIR}/report.md" | buildkite-agent annotate \
      --style "$annotation_style" \
      --context "ai-error-analysis"
    echo "📝 Analysis annotation created"
  else
    echo "⚠️ buildkite-agent not available, displaying report:"
    cat "${TEMP_DIR}/report.md"
  fi
  
  # Save as artifact if configured
  local save_artifact="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_OUTPUT_SAVE_ARTIFACT:-false}"
  if [[ "$save_artifact" == "true" ]]; then
    local artifact_path="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_OUTPUT_ARTIFACT_PATH:-ai-analysis.json}"
    cp "${TEMP_DIR}/analysis_result.json" "$artifact_path"
    echo "💾 Analysis saved as artifact: $artifact_path"
  fi
}

# Create fallback annotation if analysis fails
create_fallback_annotation() {
  local fallback_md='## ⚠️ AI Error Analysis Failed

The automated error analysis could not be completed. Please review the logs manually.

<details>
<summary>Troubleshooting</summary>

- Verify external secret management configuration
- Check network connectivity to AI provider
- Review plugin configuration and permissions
- Enable debug mode for more details

</details>'
  
  if command -v buildkite-agent >/dev/null; then
    echo "$fallback_md" | buildkite-agent annotate \
      --style "warning" \
      --context "ai-error-analysis-fallback"
  fi
}

# Execute analysis with retry logic
main() {
  local max_retries="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_PERFORMANCE_RETRY_ATTEMPTS:-3}"
  local retry_count=0
  
  while [[ $retry_count -lt $max_retries ]]; do
    if [[ $retry_count -gt 0 ]]; then
      local backoff_time=$((retry_count * 2))
      echo "🔄 Retry attempt ${retry_count}/${max_retries} (waiting ${backoff_time}s)"
      sleep "$backoff_time"
    fi
    
    if analyze_error; then
      return 0
    else
      ((retry_count++))
      echo "⚠️ Analysis attempt ${retry_count} failed"
    fi
  done
  
  echo "❌ Analysis failed after ${max_retries} attempts"
  create_fallback_annotation
  
  # Don't fail the build due to analysis failure
  return 0
}

# Debug output if enabled
if [[ "$DEBUG" == "true" ]]; then
  echo "--- ${LOG_PREFIX} Debug Information"
  echo "Provider: $PROVIDER"
  echo "Model: $MODEL"
  echo "Max tokens: $MAX_TOKENS"
  echo "Caching enabled: $ENABLE_CACHING"
  echo "Plugin directory: $PLUGIN_DIR"
  echo "Temp directory: $TEMP_DIR"
fi

# Execute main analysis
main