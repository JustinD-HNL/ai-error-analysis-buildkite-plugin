#!/bin/bash
set -euo pipefail

# AI Error Analysis Buildkite Plugin - Environment Hook (Fixed)
# Fixed JSON parsing issue

# Plugin directory
PLUGIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Initialize logging
LOG_PREFIX="ü§ñ [AI Error Analysis]"

echo "--- ${LOG_PREFIX} Setting up environment"

# Validate Python 3.10+ (2025 requirement)
if ! command -v python3 &> /dev/null; then
  echo "‚ùå Python 3 is required but not found. Please install Python 3.10 or later."
  exit 1
fi

# Check Python version (minimum 3.10)
PYTHON_VERSION=$(python3 -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
if ! python3 -c "import sys; sys.exit(0 if sys.version_info >= (3, 10) else 1)"; then
  echo "‚ùå Python ${PYTHON_VERSION} found, but Python 3.10 or later is required (3.9 EOL October 2025)."
  exit 1
fi

echo "‚úÖ Python ${PYTHON_VERSION} detected"

# Validate required commands
REQUIRED_COMMANDS=("curl" "jq")
for cmd in "${REQUIRED_COMMANDS[@]}"; do
  if ! command -v "$cmd" &> /dev/null; then
    echo "‚ùå Required command '$cmd' not found. Please install it."
    exit 1
  fi
done

# Set up plugin environment variables
export AI_ERROR_ANALYSIS_PLUGIN_DIR="${PLUGIN_DIR}"

# Security: Enable additional protections
export BUILDKITE_NO_COMMAND_EVAL="${BUILDKITE_NO_COMMAND_EVAL:-true}"

echo "--- ${LOG_PREFIX} Validating configuration and secrets"

# Get AI providers configuration with better error handling
get_ai_providers_config() {
    local providers_config="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_AI_PROVIDERS:-}"
    
    # If no configuration provided, use default
    if [[ -z "${providers_config}" ]]; then
        # Check if we have a single provider configured
        local provider="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_PROVIDER:-}"
        local model="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_MODEL:-}"
        
        if [[ -n "${provider}" ]]; then
            if [[ -n "${model}" ]]; then
                providers_config="[{\"name\":\"${provider}\",\"model\":\"${model}\"}]"
            else
                providers_config="[{\"name\":\"${provider}\"}]"
            fi
        else
            # Absolute fallback
            providers_config='[{"name":"openai","model":"gpt-4o-mini"}]'
        fi
    fi
    
    echo "${providers_config}"
}

# AI Providers validation with better error handling
validate_ai_providers() {
    local providers_config
    providers_config=$(get_ai_providers_config)
    
    echo "ü§ñ Validating AI provider configurations..."
    echo "Debug: providers_config = ${providers_config}" >&2
    
    # Create temporary Python script for validation
    local temp_script=$(mktemp)
    cat > "${temp_script}" << 'EOF'
import json
import sys
import os

def validate_providers():
    try:
        # Get providers config from command line argument
        providers_json = sys.argv[1] if len(sys.argv) > 1 else '[{"name":"openai","model":"gpt-4o-mini"}]'
        
        print(f"Debug: Parsing JSON: {providers_json}", file=sys.stderr)
        
        providers = json.loads(providers_json)
        if not isinstance(providers, list):
            providers = [providers]
        
        # 2025 Valid models
        valid_models = {
            'openai': ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-3.5-turbo'],
            'anthropic': ['claude-3-5-haiku-20241022', 'claude-3-5-sonnet-20241022', 'claude-3-opus-20240229'],
            'gemini': ['gemini-1.5-pro', 'gemini-1.5-flash', 'gemini-1.5-flash-8b']
        }
        
        invalid_configs = []
        
        for provider in providers:
            name = provider.get('name', '').lower()
            model = provider.get('model', '')
            
            if name not in valid_models:
                invalid_configs.append(f'{name}: unknown provider')
            elif model and model not in valid_models[name]:
                # Allow empty model (will use default)
                invalid_configs.append(f'{name}: {model} (valid: {", ".join(valid_models[name][:3])}...)')
        
        if invalid_configs:
            print('‚ùå Invalid AI provider/model configurations:')
            for config in invalid_configs:
                print(f'  - {config}')
            print('Please use supported model names.')
            return False
        else:
            print('‚úÖ All AI provider configurations valid')
            return True
            
    except json.JSONDecodeError as e:
        print(f'‚ùå Invalid AI providers JSON: {e}')
        print(f'Received: {sys.argv[1] if len(sys.argv) > 1 else "no input"}')
        return False
    except Exception as e:
        print(f'‚ùå Error validating providers: {e}')
        return False

if __name__ == "__main__":
    success = validate_providers()
    sys.exit(0 if success else 1)
EOF
    
    # Run validation with proper argument passing
    if python3 "${temp_script}" "${providers_config}"; then
        rm -f "${temp_script}"
        return 0
    else
        rm -f "${temp_script}"
        return 1
    fi
}

# External secret management validation
validate_external_secrets() {
    local use_external_secrets="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_SECRET_SOURCE_TYPE:-env_var}"
    
    if [[ "${use_external_secrets}" != "env_var" ]]; then
        echo "üîê External secret management enabled: ${use_external_secrets}"
        
        case "${use_external_secrets}" in
            "aws_secrets_manager")
                validate_aws_secrets_manager
                ;;
            "vault")
                validate_vault
                ;;
            "gcp_secret_manager")
                validate_gcp_secret_manager
                ;;
            *)
                echo "‚ùå Invalid external secrets provider: ${use_external_secrets}"
                echo "Valid providers: aws_secrets_manager, vault, gcp_secret_manager, env_var"
                return 1
                ;;
        esac
    else
        echo "‚ÑπÔ∏è Using environment variables for API keys"
        validate_environment_variables
    fi
}

validate_aws_secrets_manager() {
    echo "üîê Validating AWS Secrets Manager configuration..."
    
    # Check AWS CLI availability
    if ! command -v aws &> /dev/null; then
        echo "‚ùå AWS CLI not found. Please install AWS CLI for Secrets Manager support."
        return 1
    fi
    
    # Check AWS credentials
    if ! aws sts get-caller-identity &> /dev/null; then
        echo "‚ùå AWS credentials not configured or invalid."
        echo "Please configure AWS credentials using IAM roles, instance profiles, or environment variables."
        return 1
    fi
    
    echo "‚úÖ AWS Secrets Manager validation passed"
}

validate_vault() {
    echo "üîê Validating HashiCorp Vault configuration..."
    
    # Check Vault CLI availability
    if ! command -v vault &> /dev/null; then
        echo "‚ùå Vault CLI not found. Please install Vault CLI."
        return 1
    fi
    
    # Check Vault environment variables
    if [[ -z "${VAULT_ADDR:-}" ]]; then
        echo "‚ùå VAULT_ADDR environment variable not set."
        return 1
    fi
    
    echo "‚úÖ Vault configuration valid"
}

validate_gcp_secret_manager() {
    echo "üîê Validating Google Secret Manager configuration..."
    
    # Check gcloud CLI availability
    if ! command -v gcloud &> /dev/null; then
        echo "‚ùå gcloud CLI not found. Please install Google Cloud SDK."
        return 1
    fi
    
    echo "‚úÖ Google Secret Manager configuration valid"
}

validate_environment_variables() {
    echo "üîê Validating environment variable API keys..."
    
    # Get AI providers configuration
    local providers_config
    providers_config=$(get_ai_providers_config)
    
    # Create temporary Python script for API key validation
    local temp_script=$(mktemp)
    cat > "${temp_script}" << 'EOF'
import json
import os
import sys

def validate_api_keys():
    try:
        providers_json = sys.argv[1] if len(sys.argv) > 1 else '[{"name":"openai","model":"gpt-4o-mini"}]'
        providers = json.loads(providers_json)
        
        if not isinstance(providers, list):
            providers = [providers]
        
        missing_keys = []
        
        for provider in providers:
            name = provider.get('name', '').lower()
            api_key_env = provider.get('api_key_env', f'{name.upper()}_API_KEY')
            
            if not os.environ.get(api_key_env):
                missing_keys.append(f'{name}: {api_key_env}')
        
        if missing_keys:
            print('‚ùå Missing API keys:')
            for key in missing_keys:
                print(f'  - {key}')
            print('Please set the required environment variables.')
            return False
        else:
            print('‚úÖ All required API keys found')
            return True
            
    except json.JSONDecodeError as e:
        print(f'‚ùå Invalid AI providers configuration: {e}')
        return False
    except Exception as e:
        print(f'‚ùå Error validating API keys: {e}')
        return False

if __name__ == "__main__":
    success = validate_api_keys()
    sys.exit(0 if success else 1)
EOF
    
    if python3 "${temp_script}" "${providers_config}"; then
        rm -f "${temp_script}"
        return 0
    else
        rm -f "${temp_script}"
        return 1
    fi
}

# Repository and branch validation
validate_repository_access() {
    local repo="${BUILDKITE_REPO:-}"
    local branch="${BUILDKITE_BRANCH:-}"
    local allowed_branches="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_CONDITIONS_BRANCHES:-[]}"
    
    # Security: Validate repository URL format
    if [[ -n "${repo}" ]]; then
        if [[ ! "${repo}" =~ ^(git@|https://)[a-zA-Z0-9._/-]+$ ]]; then
            echo "‚ùå Invalid repository URL format: ${repo}"
            return 1
        fi
    fi
    
    # Security: Validate branch name
    if [[ -n "${branch}" ]]; then
        if [[ ! "${branch}" =~ ^[a-zA-Z0-9._/-]+$ ]]; then
            echo "‚ùå Invalid branch name format: ${branch}"
            return 1
        fi
    fi
    
    # Skip validation if no branch restrictions
    if [[ "${allowed_branches}" == "[]" ]]; then
        echo "‚úÖ No branch restrictions configured"
        return 0
    fi
    
    echo "‚úÖ Repository access validation passed"
}

# Container security validation (if running in container)
validate_container_security() {
    local enforce_non_root="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_SECURITY_RUN_AS_NON_ROOT:-false}"
    
    if [[ "${enforce_non_root}" == "true" ]]; then
        if [[ "$(id -u)" -eq 0 ]]; then
            echo "‚ùå Security violation: Running as root user is not allowed"
            echo "Please configure the plugin to run as a non-root user"
            return 1
        fi
        echo "‚úÖ Container security: Running as non-root user ($(id -u))"
    fi
}

# Set up secure caching
setup_caching() {
    local cache_enabled="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_ENABLE_CACHING:-true}"
    local cache_dir="${BUILDKITE_BUILD_PATH}/.ai-error-analysis-cache"
    
    if [[ "${cache_enabled}" == "true" ]]; then
        mkdir -p "${cache_dir}"
        chmod 700 "${cache_dir}"  # Secure permissions
        export AI_ERROR_ANALYSIS_CACHE_DIR="${cache_dir}"
        echo "‚úÖ Secure caching enabled at ${cache_dir}"
    else
        echo "‚ÑπÔ∏è Caching disabled"
    fi
}

# Install Python dependencies (minimal for basic functionality)
install_dependencies() {
    echo "üì¶ Checking Python dependencies..."
    
    # Check if requests is available (essential for API calls)
    if ! python3 -c "import requests" 2>/dev/null; then
        echo "Installing requests library..."
        if ! python3 -m pip install --user requests 2>/dev/null; then
            echo "‚ö†Ô∏è Could not install requests. API calls may fail."
        fi
    fi
    
    echo "‚úÖ Python dependencies ready"
}

# Main execution flow
main() {
    # Core validations
    if ! validate_ai_providers; then
        echo "‚ùå AI provider validation failed"
        exit 1
    fi
    
    if ! validate_external_secrets; then
        echo "‚ùå Secret validation failed"
        exit 1
    fi
    
    validate_repository_access
    validate_container_security
    setup_caching
    install_dependencies
    
    # Export configuration
    export AI_ERROR_ANALYSIS_INITIALIZED="true"
    export AI_ERROR_ANALYSIS_LOG_PREFIX="${LOG_PREFIX}"
    
    echo "‚úÖ ${LOG_PREFIX} Environment setup complete"
}

# Enhanced debug information
DEBUG_MODE="${BUILDKITE_PLUGIN_AI_ERROR_ANALYSIS_DEBUG:-false}"
if [[ "${DEBUG_MODE}" == "true" ]]; then
    echo "--- ${LOG_PREFIX} Debug Information"
    echo "Plugin directory: ${PLUGIN_DIR}"
    echo "Python version: $(python3 --version)"
    echo "Current user: $(whoami) (UID: $(id -u))"
    echo "Working directory: $(pwd)"
    
    # Show environment variables (sanitized)
    echo "Environment variables (sanitized):"
    env | grep -E "^(BUILDKITE_|AI_ERROR_ANALYSIS_)" | grep -v "API_KEY\|SECRET\|TOKEN" | sort
fi

# Execute main setup
main

# Final status
echo "‚úÖ ${LOG_PREFIX} Ready for error analysis"